<?php
	//has the template for generating node files

	class nodeCode{

		var $index_text = "var ModelCache = {};
var columnToObjectMap = {};

//Javascript does not allow for default arguments into functions
//this handles the problem for functions
//with unpredicatable arguments
function has_default(arg, def) {
   return (typeof arg == 'undefined' ? def : arg);
}


//select_name is now required!!
function buildCache(select_name){

	var ORM;
        var object_type;
        var selected_col;
        var data_cache = [];
//add code for auto-complete detection engine...

	//we use the column name to figure out which of the ORMs
	//we are going to use... this makes rebuilding trivial!!

	ORM = columnToObjectMap[select_name];

        object_type = ORM.name;
        //if we passed in a select_name, use it, otherwise use the default

        ORM.findAll().success(function(things) {

                __.each(things,function(a_thing){

	 		if(selected_col === undefined){

				//the default is just the id...
				selected_col = 'id';	

				selected = a_thing.attributes;
				__.each(selected,function(key,value){
					//choose which column to use as the select 
					//value for connecting objects...
					//any field with 'name' at the end... or not... you never know.. 
					//then choose the last 'name' in the list...
                                        if(key.indexOf(\"name\") !== -1){
                                             selected_col = key;
                                        }
                                });
				//now we should have the last colum with 
				//'name' in it... but is that what we really want?
				//sometimes we want to be able to specify
				//so we look around for 'select_name'...
                                __.each(selected,function(key,value){
                                        //choose which column to use as the select 
                                        //value for connecting objects...
                                        //any field with 'name' at the end... or not... you never know.. 
                                        //then choose the last 'name' in the list...
                                        if(key.indexOf(\"select_name\") !== -1){
                                             selected_col = key;
                                        }
                                });
			}

			my_value = a_thing[selected_col];

                        data_cache.push({
                                                id: a_thing.id,
                                                value: my_value
                                        });

                });

                ModelCache[select_name] = data_cache;
		//console.log(data_cache);
        });
}

exports.buildCache = buildCache;


//Begin autogenerated Objects...
";
	

	}


	
	var $dir_name = "node/sequelize/";
	var $index_file_name = "index.js";
	var $orm_dir_name = "orm/";	

	var $ORM_files = array();

	function each_table_start($table_data){

		$object_name = $table_data['object_name'];
		$object_label = $table_data['object_label'];

				//start headers...
		$this->ORM_files[$object_name] = "//Generated by buildORM from the $database:$this_table
module.exports = function(sequelize, DataTypes) {
  return sequelize.define('$object_name', {
";

		$this_file_name = "$object_name.orm.js";
		$project_file = "$orm_dir_name/$this_file_name";

		$this->index_text .= "\n//importing $object_name from table $database:$this_table\n"; 
		$this->index_text .= "var $object_name = sequelize.import(__dirname + '/$this_file_name');\n";
		$this->index_text .= "exports.$object_name = $object_name;\n";

	}

	var $debug = true;
	var $c = ''; //comma character starts life as an empty string...
	var $other_tables = array(); //where we store our table names..
	var $links_js = "";

	function each_row_start($row_data){

			$object_name = $row_data['object_name'];
			$col_name = $row_data['col_name'];
			$col_label = $row_data['col_label'];
			
			$col_explode = explode('_',$col_name);
			$c = $this->c;
			$foreign_key = false; //to start with we assume there are no relationships for this key...
			if(count($col_explode) > 1){
				$end_col_name = array_pop($col_explode);
				$other_table = array_pop($col_explode);
				if(strcmp('id',strtolower($end_col_name)) == 0){
					//looks like an id..

					$foreign_key = true;
					$this->other_tables[$other_table] = $object_name; //make sure they are all there...
					
					$this->index_text .= "// $col_name looks like an association\n";
					
					$this->links_js .= "
//$other_table"."s.hasOne(
$other_table"."s.hasMany(
		$object_name,
		{
//			as: 		'$col_name', 
			foreignKey: 	'$col_name'
		}
		);

columnToObjectMap['$col_name'] = $other_table"."s;
buildCache('$col_name');

";

				}//dealt with id

				
				if(strcmp('name',strtolower($end_col_name)) == 0){
					//then this is the magic name coolness..
					//this is not the level to deal with this...
				}
			}//dealt with all special column meta types..

			if($debug){
				echo "INFO: working on $database:$this_table:$col_name\n";
			}
			$fixed = false;

			if(strcmp('varchar',$row['DATA_TYPE']) == 0){

				$this->ORM_files[$object_name] .= "$c    $col_name: { type: Sequelize.STRING }";
		
				$length = $row['CHARACTER_MAXIMUM_LENGTH'];	
					
				if($this->debug){	
				if($length != 255){
					echo "WARN: The length for varchar $database:$this_table:$col_name is not 255, but $length";
					if($length > 255){
						echo " Consider using a TEXT for this field\n";
					}else{
						echo " Consider increasing to 255\n";
					}
				}
				}//end debug

				$fixed = true;
			}//end STRING logic...

			if(strcmp('text',$row['DATA_TYPE']) == 0){
				$$this->ORM_files[$object_name] .= "$c    $col_name: { type: Sequelize.TEXT }";
				$fixed = true;
			}

			if(	strcmp('int',$row['DATA_TYPE']) == 0 ||
				strcmp('bigint',$row['DATA_TYPE']) == 0){
				$extra_stuff = '';
		
				if(strcmp('PRI',$row['COLUMN_KEY']) == 0){
					$extra_stuff .= ' ,primaryKey: true '; 
				}

				$$this->ORM_files[$object_name] .= "$c    $col_name: { type: Sequelize.INTEGER $extra_stuff}";
				$fixed = true;

				if(strcmp(strtolower($col_name),'id') == 0){
					$foreign_key = true; //well, not technically
								//but it keeps us from editing it directly...
					$dust_html .= "
<input type='hidden'  id='$col_name' name='$col_name' value='{".$col_name."}'>
";
			
				}

				if(!$foreign_key){ 
			//then this is an int that just wants to be a number

					$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m<input type='number' step='1' id='$col_name' name='$col_name' value='{".$col_name."}'>
$e</li> 
 
";


				}


			}

			if(strcmp('datetime',$row['DATA_TYPE']) == 0){
				$$this->ORM_files[$object_name] .= "$c    $col_name: { type: Sequelize.DATE }";
				$fixed = true;

					$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m<input type='date' id='$col_name' name='$col_name' value='{".$col_name."}'> 
$e</li> 
 
";
			}

			if(strcmp('tinyint',$row['DATA_TYPE']) == 0){
				$$this->ORM_files[$object_name] .= "$c    $col_name: { type: Sequelize.BOOLEAN }";
				$fixed = true;
				if($debug){
				if(strcmp('tinyint(1)',$row['COLUMN_TYPE']) != 0){
					echo "WARN: The length for $database:$this_table:$col_name is other than 1... might want to change that... tinyints are always boolean in this world\n";
				}
				}


					$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m<input type='checkbox' step='1' id='$col_name' name='$col_name' value='{".$col_name."}'>
$e</li> 

";

			}

			if(strcmp('float',$row['DATA_TYPE']) == 0){
				$$this->ORM_files[$object_name] .= "$c    $col_name: { type: Sequelize.FLOAT }";
				$fixed = true;
				$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m<input type='number' step='1' id='$col_name' name='$col_name' value='{".$col_name."}'>
$e
";
			}

			if(!$fixed){
				$data_type = $row['DATA_TYPE'];
				echo "ERROR: for $database:$this_table:$col_name we cannot work with $data_type\n";
				$orm_index_js .= "//I did not understand what to do with $col_name\n";
			}

			$this->c = ",\n";
	



	}
?>
